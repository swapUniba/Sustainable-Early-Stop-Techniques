import numpy as np

# gen(seed:42) dati sintetici
acc = [0.27031763453180796, 0.30219543779961605, 0.3371778713843982, 0.36696944427945727, 0.3665870400657902, 0.3811206586177094, 0.4118436071601608, 0.41483050891418494, 0.4123948948577231, 0.43150116221946094, 0.42964488988659455, 0.43716826236787343, 0.4512321439045571, 0.4361844240801269, 0.4441527936816521, 0.4614948365094115, 0.4623783434210072, 0.48074663056495803, 0.47335989096355613, 0.4729170719851762, 0.5060825424745125, 0.49335924094717504, 0.500304841863294, 0.4892308095686195, 0.5017322256600197, 0.5118434683310824, 0.5026530784163694, 0.5212284332079115, 0.5146613326292125, 0.520842233813031, 0.520735398886184, 0.5481764244400186, 0.5323332325561375, 0.5246240646130191, 0.5460825967470788, 0.5282319092134841, 0.5450432861907486, 0.5258069394761061, 0.5345087642314795, 0.5520872771427057, 0.5597752678001788, 0.5563227596894067, 0.5556200649631101, 0.5558842703821399, 0.5461822770500616, 0.5557966777949088, 0.5603736651085125, 0.5774952786365917, 0.5722649673281343, 0.5530653910595217, 0.5757673856009152, 0.5704716027760384, 0.5693155154326197, 0.583931470387387, 0.5898235024172476, 0.5904950392414953, 0.574429770793924, 0.5813414996702821, 0.5893308468441317, 0.5973320601445219, 0.5843179219342065, 0.5887616000432189, 0.5810396082701135, 0.5816026393781463, 0.6031293938205666, 0.6099843194743804, 0.5970985965894091, 0.6092304137422885, 0.6041680271547502, 0.5954378085493373, 0.6068215966828269, 0.6198884521814719, 0.6054325783237905, 0.6227028088002219, 0.582107692201499, 0.6177566150145547, 0.6116246043989811, 0.6089651061633128, 0.6140587254875145, 0.5944366340993027, 0.613272438907335, 0.6201830954588883, 0.6325200354493354, 0.6136741553344618, 0.6118746338502707, 0.6160319633999373, 0.6312810619657088, 0.6264798833578128, 0.618948198302058, 0.6304202624219106, 0.6272887654489121, 0.6370237020276206, 0.621325081941778, 0.6260666814884046, 0.6264094642884845, 0.6166724085238298, 0.6352357521467438, 0.6358422761280559, 0.6342304120005698, 0.6327715315736292, 0.6218925781943405, 0.6327596526798674, 0.6344498937433951, 0.63075648202169, 0.6380600614652371, 0.6445986996841155, 0.6602970874494803, 0.6440499604788389, 0.6457407044079015, 0.6432739673668606, 0.6256762880409932, 0.6454369187991332, 0.647135033151439, 0.6719885707922703, 0.6462488293800347, 0.6519971949495679, 0.6494369987334376, 0.6388929596128271, 0.662796933676942, 0.6596704538940702, 0.6608374213454244, 0.6446028710473949, 0.668488100423716, 0.6411989265182082, 0.6618372537495554, 0.6786185459720616, 0.6475480877605624, 0.6525241803928072, 0.6599117122715249, 0.6546029040987761, 0.644847994287659, 0.6617518151742668, 0.6511493750531065, 0.6672093124557126, 0.6539749484645702, 0.6793592400134982, 0.6567130448417016, 0.6620056935904443, 0.6740373320796661, 0.6542645575258443, 0.6695140984431254, 0.6809725492300015, 0.652483301283826, 0.6710569373251548, 0.6724574074609921, 0.6783203659035034, 0.6587718246078047, 0.658571655743681, 0.6776262808999466, 0.6760031649930359, 0.6761605647475509, 0.6777383555194467, 0.6680878357567133, 0.6778208539979508, 0.6790353514512819, 0.6695635480202021, 0.6959634177811145, 0.6826388356006473, 0.6665785757518287, 0.6856445682255798, 0.669915999544734, 0.6881138538518661, 0.6924056065774797, 0.6731859651267891, 0.6915962240379098, 0.6866565249612805, 0.6913121896035608, 0.7026190496336915, 0.6817534693588652, 0.6772229572180862, 0.676414918584643, 0.6776985171107281, 0.6856290097433372, 0.6903518393661218, 0.6902444417836838, 0.6962835367304825, 0.6886728841816906, 0.7036063913496602, 0.6869497250090446, 0.7173203178235228, 0.6968947545701228, 0.6825831141204635, 0.6809595579765161, 0.6970042155810032, 0.6904531172707288, 0.7003332785263434, 0.6984284821279826, 0.6934679814946162, 0.6862258587753939, 0.6800402373505381, 0.6912158893008313, 0.7047347984228971, 0.6987989884481486, 0.6846853986431609, 0.6993568516363055, 0.7019580178832336, 0.6897436420459414, 0.7005944348808694, 0.7001118576203008, 0.6885702970216937]
co2 = [0.0005332787360348283, 0.0010843696886716518, 0.0016852122504891795, 0.0022806672060051696, 0.002630524645770398, 0.0030219283964570184, 0.0035561922465826264, 0.0040879173634615655, 0.00461736692127095, 0.0054781951355693075, 0.006008461476545345, 0.0065928294440205934, 0.007156686966809815, 0.007687941151648097, 0.008120198711593226, 0.00865756119562967, 0.009039436908353096, 0.00947261749068539, 0.009878659266693745, 0.010339151920769686, 0.011020661491373658, 0.011281728467481423, 0.01179590901440898, 0.012077964182540668, 0.012471881117436126, 0.01301968074799989, 0.013462818797922129, 0.013789570817901829, 0.014150394312259599, 0.014648546183110414, 0.015003550655416262, 0.015451097444174633, 0.015879426053316187, 0.016235918586581022, 0.016869857300698843, 0.017350695786590008, 0.017563540878665313, 0.017995468864129616, 0.0183405063588702, 0.01883490975286116, 0.01916277193922667, 0.019556376983987718, 0.02000992900734896, 0.020497542555751855, 0.02077654575388723, 0.021140133304949883, 0.0214876912601073, 0.021815435560692074, 0.02238309282244312, 0.02281274727207354, 0.023073869373781683, 0.023550930013143102, 0.024146493705277026, 0.024631171563402637, 0.024858758742217383, 0.02518796188946385, 0.025690391426142944, 0.025993484209232694, 0.026409856583050687, 0.026857450467241972, 0.027133037246538275, 0.027493523138253935, 0.02753400263943226, 0.027794347079308133, 0.028130059552158075, 0.028364445675510903, 0.02888505542524563, 0.029097623063694424, 0.029407422482388357, 0.029772531388143782, 0.030266933390837074, 0.030471870476136878, 0.030934967535268032, 0.03128103762186607, 0.031526208303354876, 0.031914023589641835, 0.03227382647336551, 0.03255200221524513, 0.032895488866191654, 0.03319178141674076, 0.033536282941949984, 0.033933980051132774, 0.03442240835426934, 0.03462680429280107, 0.035166644231239046, 0.03529633936925428, 0.035604440258128374, 0.03598493498016259, 0.03633308885331493, 0.03658927331427981, 0.036885323230126284, 0.03715130096683819, 0.037406065932170676, 0.03780315907569455, 0.03814943289344372, 0.03838916134172455, 0.03878659564003574, 0.039123262531337424, 0.03950895599773927, 0.039874804100177, 0.04009327539123893, 0.040337121225412595, 0.04071021520442732, 0.041068125026380554, 0.04136142329841698, 0.04166706752602353, 0.04208727594743167, 0.04231909853071823, 0.042663333092394534, 0.042931191026592645, 0.04319605971971422, 0.043591141034290015, 0.043957460280419004, 0.044321169967193104, 0.0447326647774667, 0.04501430735654035, 0.04536064713760567, 0.04560637422346247, 0.045914160851419875, 0.04617513968872813, 0.046457462462258695, 0.04678823822594853, 0.04697631991846559, 0.047454112888070346, 0.0476207226207464, 0.04776517917293953, 0.048145536296694075, 0.04848792587231288, 0.0488122450437095, 0.04913567724837887, 0.049393747236568405, 0.04956201999156668, 0.049826308648572175, 0.050014017137601154, 0.05036567664782222, 0.050603847708866896, 0.05077291040438656, 0.05099112617334419, 0.051281521900129065, 0.05147300651329919, 0.05163740225685082, 0.05190715567219274, 0.05217581010002538, 0.052368052764356424, 0.05256267123075341, 0.052826389909963196, 0.05292089259286012, 0.05301826077688388, 0.05318334034341275, 0.05339773499695241, 0.0536633864253795, 0.05404430991558241, 0.05436229680706802, 0.054577362778591265, 0.054805365683197986, 0.054933867749504206, 0.05515962766366112, 0.055357234971386476, 0.05561484763317957, 0.05575633864055483, 0.05603136632320078, 0.05640661778056676, 0.056616609443956474, 0.05687654395601059, 0.057164222878326704, 0.057341672031667394, 0.057580564624375066, 0.05779722479225724, 0.0580213163252771, 0.05815726765044071, 0.058371904709898004, 0.0586328296508438, 0.05898801349788545, 0.0592929597193248, 0.05971625200821263, 0.05984645142484482, 0.06013958299057328, 0.06036278719569322, 0.060785613143538364, 0.06090760974125361, 0.06102544985115504, 0.06116631381925954, 0.06116631381925954, 0.0613125385374947, 0.061434431490640554, 0.061646288057492886, 0.06187629675733429, 0.06225876777800825, 0.06254768982889546, 0.06268290973206248, 0.06278501398231724, 0.06302519188827055, 0.06308319962642712, 0.0634554264065769, 0.06376150591769555, 0.06390178317403637, 0.06391672856857082, 0.06423744335919368, 0.0644103902901087, 0.06471765083216913]

acc = acc[:150]
co2 = co2[:150]

# var
best_epoch = -np.inf
_acc = None # prev_acc
_co2 = None # prev_co2
"""
esempio
30 acc -> 30
1000g Co2 -> 1*10^3

conversione in grammi

0,03 acc ]	     0.03 acc
1g Co2   ] ovvero 0.001 Kg Co2
"""
# Val da provare:
# 40 7 (stesso andamento)
# 40 8 or 40 9 (mi fermo prima con better rapporto?)
# 20 3 (mi fermo dopo io, ma rientro sempre in acc/co2 che ci siamo prefissati)
# "costo" di CO2 <-> accuratezza, ovvero la quantitÃ  di kg di CO2 che son disposto a sacrificare per guadagnare TOT accuratezza
trade_off = 30 # acc/Kg*CO2  ### 200 33% -- 0.0016
# contatore MAX patient per emissioni
K = 7
# contatore pateient per emissioni
patience_counter = 0

best = -np.inf
cur_step = 0
max_step = 10

utility_prec = None # se no 0 da valutare || prev_utility

#altre var che non ho "usato" ai fini dell'algoritmo
max_epoch = len(acc)
u_t_vector = []
#j = None

for i in range(0, max_epoch):
	best_val = False
	value = acc[i]
	i_epoch = float((i+1)/max_epoch * 10.0)
	print(f"\nPercentuale saturazione epoche max: {round(i_epoch/10, 2)}%, ovvero: {(i+1)}/{max_epoch}")

	if value >= best:
		best_epoch = i
		cur_step = 0
		print("[cur_step]=0 Avuto miglioramento metrica:", value, ">>", best)		
		if _acc is not None and _co2 is not None:
			utility = (acc[i] - _acc) - ((co2[i] - _co2) * trade_off) # cerdo di bilanciare i due aspetti in pratica | efficiency_score? idk
			u_t_vector.append((utility, i))
			print("utility:", utility)

			if utility >= 0:
				patience_counter = 0
			else:
				#applicao una sorta di seconda chance
				if utility_prec is not None and (utility_prec + utility) < 0:
					patience_counter += 1
		
			print("Contatore patience:", patience_counter)

			if patience_counter >= K:
				print(f"STOP train in epoca {(i+1)} - Avendo consumato {co2[i]}")
				#print(f">", ((acc[i]-0.27031763453180796)/(co2[i]-0.0005332787360348283)*(i+1))/max_epoch)
				#print(f"Metrica per confronto:", acc[i] - (co2[i]*trade_off))
				#print(f"Rapporto acc/co2:", (acc[i]/co2[i]*(i+1))/max_epoch)
				#print(f"Metrica per confronto:", acc[i]/co2[i])
				break
			utility_prec = utility
		_acc = value
		_co2 = co2[i]
		best = value
	else:
		print(f"[cur_step]={(cur_step+1)} Non ho avuto un miglioramento: {value} << {best}")
		cur_step += 1
		if cur_step >= max_step:
			print("Epoca:", i+1, "Normale Early Stop | Avendo consumato:", co2[i])
			break

print("Migliore modello trovato in epoch:", best_epoch)
print("Performace modello:", acc[best_epoch])
print(abs((acc[0]-acc[best_epoch])/(co2[0]-co2[best_epoch])))
print(f"Il best si trovava a all'indice {acc.index(max(acc))} e acc sarebbe stata {max(acc)} ")

# Grafico
import matplotlib.pyplot as plt
fig, ax1 = plt.subplots()

# Metrica
ax1.set_xlabel('Epoch')
ax1.set_ylabel('Metric', color='tab:blue', fontsize=11)
ax1.plot(acc, color='tab:blue', label='Trend Metric')
ax1.tick_params(axis='y', labelcolor='tab:blue')

# Emission-Co2
ax2 = ax1.twinx()
ax2.set_ylabel('Emission', color='tab:red', fontsize=11)
ax2.plot(co2, color='tab:red', label='Trend Emission')
ax2.tick_params(axis='y', labelcolor='tab:red')
ax2.spines.right.set_position(("axes", 1.2))

# U_t
ax3 = ax1.twinx()  
ax3.set_ylabel('Utility', color='tab:green', fontsize=11)

# Estraggo i valori di u_t e le epoche
u_t_values = [u_t for u_t, epoca in u_t_vector]
epoche = [epoca for u_t, epoca in u_t_vector]

ax3.plot(epoche, u_t_values, color='tab:green', label='Trend Utility', alpha=0.7)
ax3.tick_params(axis='y', labelcolor='tab:green')

# best_epoch
ax1.axvline(x=best_epoch, color='green', linestyle='--', label='Early Stop con valutazione della Utility')
#ax1.scatter(best_epoch, acc[best_epoch], color='red', label=f'Stop training')
#ax2.scatter(best_epoch, co2[best_epoch], color='blue', label='Stop training')

positive_u_t_values = [u_t for u_t, epoca in u_t_vector if u_t >= 0]
epoche = [epoca for u_t, epoca in u_t_vector if u_t >= 0]
ax3.scatter(epoche, positive_u_t_values, color='black', alpha=0.5, label='Reset contatore patient (Utility >= 0)')


# Early stopping normale
best = -np.inf
cur_step = 0
max_step = 10
for i in range(0, max_epoch):
    best_val = False
    value = acc[i]
    i_epoch = float((i+1)/max_epoch * 10.0)
    if value >= best:
        best_epoch_normal = i
        cur_step = 0
        _acc = value
        _co2 = co2[i]
        best = value
    else:
        cur_step += 1
        if cur_step >= max_step:
            break

# Linea early stop normale
ax1.axvline(x=best_epoch_normal+max_step, color='orange', linestyle='--', label=f'Early Stop Classic (patience = {max_step})')

# Miglior modello trovato (ealy classic)
ax1.scatter(best_epoch_normal, acc[best_epoch_normal], color='blue', s=60, zorder=6, label='Best Epoch (Early Classic)', alpha=0.7)

plt.gcf().set_size_inches(12, 8)
fig.tight_layout(pad=2.0)

#plt.legend(loc='lower right')
ax1.legend(loc='lower right', bbox_to_anchor=(1, 0.12))
ax2.legend(loc='lower right', bbox_to_anchor=(1, 0.075))
ax3.legend(loc='lower right', bbox_to_anchor=(1, 0.0))

ax1.tick_params(axis='y',labelsize=11)
ax1.tick_params(axis='x', labelsize=11)
ax2.tick_params(axis='y',labelsize=11)
ax2.tick_params(axis='x', labelsize=11)
ax3.tick_params(axis='y',labelsize=11)
ax3.tick_params(axis='y',labelsize=11)

plt.title(f'Simulazione andamento:\nEarly Stopping con valutazione della Utility ~ (Î± - Î²): {trade_off} - {K}', fontsize=15)
plt.tight_layout(pad=3.0)
plt.show()